{
local valid_skill_table = {
  "Fighting",
  "Short Blades",
  "Long Blades",
  "Axes",
  "Maces & Flails",
  "Polearms",
  "Staves",
  "Unarmed Combat",
  
  "Bows",
  "Crossbows",
  "Throwing",
  "Slings",
  
  "Armour",
  "Dodging",
  "Shields",
  
  "Spellcasting",
  "Conjurations",
  "Hexes",
  "Charms",
  "Summonings",
  "Necromancy",
  "Translocations",
  "Transmutations",
  "Fire Magic",
  "Ice Magic",
  "Air Magic",
  "Earth Magic",
  "Poison Magic",

  "Invocations",
  "Evocations",
  "Stealth"}

function print_skill_watch_list()
  local str = "Skill alert currently watching: "
  
  local first_skill = true
  for skill_name, val in pairs(c_persist.skill_alerts) do
    if first_skill then
      str = str .. "<white>" .. skill_name .. "[</white><blue>" .. you.base_skill(skill_name) .. "</blue>|<green>" .. tostring(val) .. "</green><white>]</white>"
    else
      str = str .. ", <white>" .. skill_name .. "[</white><blue>" .. you.base_skill(skill_name) .. "</blue>|<green>" .. tostring(val) .. "</green><white>]</white>"
    end
    first_skill = false
  end
  crawl.mpr(str)
end
  
function set_skill_alert()
  print_skill_watch_list()
  
  crawl.mpr("Select skill to watch / unwatch: ", "prompt")
  local new_skill = crawl.c_input_line()
  if new_skill == '' or new_skill == nil then
    return
  end

  local valid_skill = false
  for _,skill_name in pairs(valid_skill_table) do
    if string.find(string.lower(skill_name), string.lower(new_skill)) then
      valid_skill = true
      new_skill = skill_name
      break
    end
  end
  
  if valid_skill == false then
    crawl.mpr("Invalid skill name")
    return
  end
  
  local skill_found = false
  for skill_name,_ in pairs(c_persist.skill_alerts) do
    if string.find(skill_name, new_skill) then
      skill_found = true
    end
  end
  
  if skill_found then
    crawl.mpr("Unwatching skill: <white>" .. new_skill .. "[</white><blue>" .. you.base_skill(new_skill) .. "</blue><white>]</white>")
    c_persist.skill_alerts[new_skill] = nil
  else
    crawl.mpr("Watching skill: <white>" .. new_skill .. "[</white><blue>" .. you.base_skill(new_skill) .. "</blue><white>]</white>")
    crawl.mpr("Alert at value: ", "prompt")
    local skill_val_string = crawl.c_input_line()
    if skill_val_string == nil or skill_val_string == "" or tonumber(skill_val_string) == nil then
      crawl.mpr("Invalid number")
      return
    end
    local new_skill_value = math.floor(tonumber(skill_val_string))
    c_persist.skill_alerts[new_skill] = new_skill_value
  end
  
  print_skill_watch_list()
end

function check_skill_alerts()
  local skill_alert_triggered = false
  
  if c_persist.skill_alerts == nil then
    c_persist.skill_alerts = {}
  end
  
  for skill_name, trigger_level in pairs(c_persist.skill_alerts) do
    local cur_skill_level = math.floor(tonumber(you.base_skill(skill_name)))
    if cur_skill_level >= trigger_level then
      crawl.mpr("<white>Watched skill </white><green>" .. skill_name .. "</green><white> reached level " .. tostring(cur_skill_level) .. "</white>")
      skill_alert_triggered = true
      c_persist.skill_alerts[skill_name] = nil
    end
  end
  
  if skill_alert_triggered then
    crawl.more()
    crawl.sendkeys("m")
  end
end

function ready()
  check_skill_alerts()
end
}